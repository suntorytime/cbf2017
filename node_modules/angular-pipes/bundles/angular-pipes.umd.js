(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) :
	(factory((global['angular-pipes'] = {}),global.ng.core));
}(this, (function (exports,core) { 'use strict';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0
THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.
See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */









function __values(o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}
function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function isUndefined(value) {
    return typeof value === 'undefined';
}
function isNull(value) {
    return value === null;
}
function isNumber(value) {
    return typeof value === 'number';
}
function isNumberFinite(value) {
    return isNumber(value) && isFinite(value);
}
function isPositive(value) {
    return value >= 0;
}
function isInteger(value) {
    return (value % 1) === 0;
}
function isNil(value) {
    return value === null || typeof (value) === 'undefined';
}
function isString(value) {
    return typeof value === 'string';
}
function isObject(value) {
    return typeof value === 'object';
}
function isArray(value) {
    return Array.isArray(value);
}
function isFunction(value) {
    return typeof value === 'function';
}
function toDecimal(value, decimal) {
    return Math.round(value * Math.pow(10, decimal)) / Math.pow(10, decimal);
}
function upperFirst(value) {
    return value.slice(0, 1).toUpperCase() + value.slice(1);
}
function createRound(method) {
    var func = ((Math))[method];
    return function (value, precision) {
        if (precision === void 0) { precision = 0; }
        if (typeof value === 'string') {
            throw new TypeError('Rounding method needs a number');
        }
        if (typeof precision !== 'number' || isNaN(precision)) {
            precision = 0;
        }
        if (precision) {
            var pair = (value + "e").split('e');
            var val = func(pair[0] + "e" + (+pair[1] + precision));
            pair = (val + "e").split('e');
            return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(value);
    };
}
function leftPad(str, len, ch) {
    if (len === void 0) { len = 0; }
    if (ch === void 0) { ch = ' '; }
    str = String(str);
    ch = toString(ch);
    var i = -1;
    var length = len - str.length;
    while (++i < length && (str.length + ch.length) <= len) {
        str = ch + str;
    }
    return str;
}
function rightPad(str, len, ch) {
    if (len === void 0) { len = 0; }
    if (ch === void 0) { ch = ' '; }
    str = String(str);
    ch = toString(ch);
    var i = -1;
    var length = len - str.length;
    while (++i < length && (str.length + ch.length) <= len) {
        str += ch;
    }
    return str;
}
function toString(value) {
    return "" + value;
}
function pad(str, len, ch) {
    if (len === void 0) { len = 0; }
    if (ch === void 0) { ch = ' '; }
    str = String(str);
    ch = toString(ch);
    var i = -1;
    var length = len - str.length;
    var left = true;
    while (++i < length) {
        var l = (str.length + ch.length <= len) ? (str.length + ch.length) : (str.length + 1);
        if (left) {
            str = leftPad(str, l, ch);
        }
        else {
            str = rightPad(str, l, ch);
        }
        left = !left;
    }
    return str;
}
function flatten(input, index) {
    if (index === void 0) { index = 0; }
    if (index >= input.length) {
        return input;
    }
    if (isArray(input[index])) {
        return flatten(input.slice(0, index).concat(input[index], input.slice(index + 1)), index);
    }
    return flatten(input, index + 1);
}
function getProperty(value, key) {
    if (isNil(value) || !isObject(value)) {
        return undefined;
    }
    var keys = key.split('.');
    var result = value[((keys.shift()))];
    try {
        for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
            var key_1 = keys_1_1.value;
            if (isNil(result) || !isObject(result)) {
                return undefined;
            }
            result = result[key_1];
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return result;
    var e_1, _a;
}
function sum(input, initial) {
    if (initial === void 0) { initial = 0; }
    return input.reduce(function (previous, current) { return previous + current; }, initial);
}
function shuffle(input) {
    if (!isArray(input)) {
        return input;
    }
    var copy = __spread(input);
    for (var i = copy.length; i; --i) {
        var j = Math.floor(Math.random() * i);
        var x = copy[i - 1];
        copy[i - 1] = copy[j];
        copy[j] = x;
    }
    return copy;
}
function deepIndexOf(collection, value) {
    var index = -1;
    var length = collection.length;
    while (++index < length) {
        if (deepEqual(value, collection[index])) {
            return index;
        }
    }
    return -1;
}
function deepEqual(a, b) {
    if (a === b) {
        return true;
    }
    if (!(typeof a === 'object' && typeof b === 'object')) {
        return a === b;
    }
    var keysA = Object.keys(a);
    var keysB = Object.keys(b);
    if (keysA.length !== keysB.length) {
        return false;
    }
    var hasOwn = Object.prototype.hasOwnProperty;
    for (var i = 0; i < keysA.length; i++) {
        var key = keysA[i];
        if (!hasOwn.call(b, keysA[i]) || !deepEqual(a[key], b[key])) {
            return false;
        }
    }
    return true;
}
function isDeepObject(object) {
    return object.__isDeepObject__;
}
function wrapDeep(object) {
    return new DeepWrapper(object);
}
function unwrapDeep(object) {
    if (isDeepObject(object)) {
        return object.data;
    }
    return object;
}
var DeepWrapper = /** @class */ (function () {
    function DeepWrapper(data) {
        this.data = data;
        this.__isDeepObject__ = true;
    }
    return DeepWrapper;
}());
function count(input) {
    if (!isArray(input) && !isObject(input) && !isString(input)) {
        return input;
    }
    if (isObject(input)) {
        return Object.keys(input).map(function (value) { return input[value]; }).length;
    }
    return input.length;
}
function empty(input) {
    if (!isArray(input)) {
        return input;
    }
    return input.length === 0;
}
function every(input, predicate) {
    if (!isArray(input) || !predicate) {
        return input;
    }
    var result = true;
    var i = -1;
    while (++i < input.length && result) {
        result = predicate(input[i], i, input);
    }
    return result;
}
function takeUntil(input, predicate) {
    var i = -1;
    var result = [];
    while (++i < input.length && !predicate(input[i], i, input)) {
        result[i] = input[i];
    }
    return result;
}
function takeWhile(input, predicate) {
    return takeUntil(input, function (item, index, collection) { return !predicate(item, index, collection); });
}
var GroupByPipe = /** @class */ (function () {
    function GroupByPipe() {
    }
    GroupByPipe.prototype.transform = function (input, prop) {
        if (!isArray(input)) {
            return input;
        }
        var arr = {};
        try {
            for (var input_1 = __values(input), input_1_1 = input_1.next(); !input_1_1.done; input_1_1 = input_1.next()) {
                var value = input_1_1.value;
                var field = getProperty(value, prop);
                if (isUndefined(arr[field])) {
                    arr[field] = [];
                }
                arr[field].push(value);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (input_1_1 && !input_1_1.done && (_a = input_1.return)) _a.call(input_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return Object.keys(arr).map(function (key) { return ({ key: key, 'value': arr[key] }); });
        var e_2, _a;
    };
    return GroupByPipe;
}());
GroupByPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'groupBy'
            },] },
];
GroupByPipe.ctorParameters = function () { return []; };
var MaxPipe = /** @class */ (function () {
    function MaxPipe() {
    }
    MaxPipe.prototype.transform = function (input) {
        if (!isArray(input)) {
            return input;
        }
        if (input.length === 0) {
            return undefined;
        }
        var max = input[0];
        input.forEach(function (value) {
            if (max < value) {
                max = value;
            }
        });
        return max;
    };
    return MaxPipe;
}());
MaxPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'max'
            },] },
];
MaxPipe.ctorParameters = function () { return []; };
var MeanPipe = /** @class */ (function () {
    function MeanPipe() {
    }
    MeanPipe.prototype.transform = function (input) {
        if (!isArray(input)) {
            return input;
        }
        var count$$1 = input.length;
        if (count$$1 === 0) {
            return undefined;
        }
        return sum(input) / count$$1;
    };
    return MeanPipe;
}());
MeanPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'mean'
            },] },
];
MeanPipe.ctorParameters = function () { return []; };
var MinPipe = /** @class */ (function () {
    function MinPipe() {
    }
    MinPipe.prototype.transform = function (input) {
        if (!isArray(input)) {
            return input;
        }
        if (input.length === 0) {
            return undefined;
        }
        var min = input[0];
        input.forEach(function (value) {
            if (min > value) {
                min = value;
            }
        });
        return min;
    };
    return MinPipe;
}());
MinPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'min'
            },] },
];
MinPipe.ctorParameters = function () { return []; };
var SumPipe = /** @class */ (function () {
    function SumPipe() {
    }
    SumPipe.prototype.transform = function (input) {
        return !isArray(input) ? input : sum(input);
    };
    return SumPipe;
}());
SumPipe.decorators = [
    { type: core.Pipe, args: [{ name: 'sum' },] },
];
SumPipe.ctorParameters = function () { return []; };
var NgAggregatePipesModule = /** @class */ (function () {
    function NgAggregatePipesModule() {
    }
    return NgAggregatePipesModule;
}());
NgAggregatePipesModule.decorators = [
    { type: core.NgModule, args: [{
                declarations: [
                    GroupByPipe,
                    MaxPipe,
                    MeanPipe,
                    MinPipe,
                    SumPipe
                ],
                exports: [
                    GroupByPipe,
                    MaxPipe,
                    MeanPipe,
                    MinPipe,
                    SumPipe
                ]
            },] },
];
NgAggregatePipesModule.ctorParameters = function () { return []; };
var EmptyPipe = /** @class */ (function () {
    function EmptyPipe() {
    }
    EmptyPipe.prototype.transform = function (input) {
        return empty(input);
    };
    return EmptyPipe;
}());
EmptyPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'empty'
            },] },
];
EmptyPipe.ctorParameters = function () { return []; };
var HeadPipe = /** @class */ (function () {
    function HeadPipe() {
    }
    HeadPipe.prototype.transform = function (input) {
        if (!isArray(input)) {
            return input;
        }
        return input[0];
    };
    return HeadPipe;
}());
HeadPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'head'
            },] },
];
HeadPipe.ctorParameters = function () { return []; };
var InitialPipe = /** @class */ (function () {
    function InitialPipe() {
    }
    InitialPipe.prototype.transform = function (input) {
        if (!isArray(input)) {
            return input;
        }
        return input.slice(0, input.length - 1);
    };
    return InitialPipe;
}());
InitialPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'initial'
            },] },
];
InitialPipe.ctorParameters = function () { return []; };
var LastPipe = /** @class */ (function () {
    function LastPipe() {
    }
    LastPipe.prototype.transform = function (input) {
        if (!isArray(input)) {
            return input;
        }
        return input[input.length - 1];
    };
    return LastPipe;
}());
LastPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'last'
            },] },
];
LastPipe.ctorParameters = function () { return []; };
var JoinPipe = /** @class */ (function () {
    function JoinPipe() {
    }
    JoinPipe.prototype.transform = function (input, character) {
        if (character === void 0) { character = ''; }
        if (!isArray(input)) {
            return input;
        }
        return input.join(character);
    };
    return JoinPipe;
}());
JoinPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'join'
            },] },
];
JoinPipe.ctorParameters = function () { return []; };
var TailPipe = /** @class */ (function () {
    function TailPipe() {
    }
    TailPipe.prototype.transform = function (input) {
        if (!isArray(input)) {
            return input;
        }
        return input.slice(1, input.length);
    };
    return TailPipe;
}());
TailPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'tail'
            },] },
];
TailPipe.ctorParameters = function () { return []; };
var UniqPipe = /** @class */ (function () {
    function UniqPipe() {
    }
    UniqPipe.prototype.transform = function (input) {
        if (!isArray(input) && !isDeepObject(input)) {
            return input;
        }
        if (isDeepObject(input)) {
            var unwrappedInput_1 = unwrapDeep(input);
            if (!isArray(unwrappedInput_1)) {
                return unwrappedInput_1;
            }
            return unwrappedInput_1.filter(function (value, index) { return deepIndexOf(unwrappedInput_1, value) === index; });
        }
        return input.filter(function (value, index) { return input.indexOf(value) === index; });
    };
    return UniqPipe;
}());
UniqPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'uniq'
            },] },
];
UniqPipe.ctorParameters = function () { return []; };
var WithoutPipe = /** @class */ (function () {
    function WithoutPipe() {
    }
    WithoutPipe.prototype.transform = function (input) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (!isArray(input) && !isDeepObject(input)) {
            return input;
        }
        if (isDeepObject(input)) {
            var unwrappedInput = unwrapDeep(input);
            if (!isArray(unwrappedInput)) {
                return unwrappedInput;
            }
            return unwrappedInput.filter(function (value) { return deepIndexOf(args, value) === -1; });
        }
        return input.filter(function (value) { return args.indexOf(value) === -1; });
    };
    return WithoutPipe;
}());
WithoutPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'without'
            },] },
];
WithoutPipe.ctorParameters = function () { return []; };
var MapPipe = /** @class */ (function () {
    function MapPipe() {
    }
    MapPipe.prototype.transform = function (input, fn) {
        if (!isArray(input) || !fn) {
            return input;
        }
        return input.map(fn);
    };
    return MapPipe;
}());
MapPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'map'
            },] },
];
MapPipe.ctorParameters = function () { return []; };
var WherePipe = /** @class */ (function () {
    function WherePipe() {
    }
    WherePipe.prototype.transform = function (input, fn) {
        if (!isArray(input)) {
            return input;
        }
        if (isFunction(fn)) {
            return input.filter(fn);
        }
        else if (isArray(fn)) {
            var _a = __read(fn, 2), key_2 = _a[0], value_1 = _a[1];
            return input.filter(function (item) { return getProperty(item, key_2) === value_1; });
        }
        else if (fn) {
            return input.filter(function (item) { return item === fn; });
        }
        else {
            return input;
        }
    };
    return WherePipe;
}());
WherePipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'where'
            },] },
];
WherePipe.ctorParameters = function () { return []; };
var FirstOrDefaultPipe = /** @class */ (function () {
    function FirstOrDefaultPipe() {
    }
    FirstOrDefaultPipe.find = function (input, predicate, defaultValue) {
        var found = false;
        var result;
        var i = -1;
        while (!found && ++i < input.length) {
            found = predicate(input[i], i, input);
        }
        if (found) {
            result = input[i];
        }
        if (typeof result === 'undefined' && typeof defaultValue !== 'undefined') {
            result = defaultValue;
        }
        return result;
    };
    FirstOrDefaultPipe.prototype.transform = function (input, predicate, defaultValue) {
        if (!isArray(input)) {
            return input;
        }
        if (isFunction(predicate)) {
            return FirstOrDefaultPipe.find(input, (predicate), defaultValue);
        }
        else if (isArray(predicate)) {
            var _a = __read((predicate), 2), key_3 = _a[0], value_2 = _a[1];
            return FirstOrDefaultPipe.find(input, function (item) { return getProperty(item, key_3) === value_2; }, defaultValue);
        }
        else if (predicate) {
            return FirstOrDefaultPipe.find(input, function (item) { return item === (predicate); }, defaultValue);
        }
        else {
            return input;
        }
    };
    return FirstOrDefaultPipe;
}());
FirstOrDefaultPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'firstOrDefault'
            },] },
];
FirstOrDefaultPipe.ctorParameters = function () { return []; };
var RangePipe = /** @class */ (function () {
    function RangePipe() {
    }
    RangePipe.prototype.transform = function (_input, size, start, step) {
        if (size === void 0) { size = 0; }
        if (start === void 0) { start = 1; }
        if (step === void 0) { step = 1; }
        var range = [];
        for (var length = 0; length < size; ++length) {
            range.push(start);
            start += step;
        }
        return range;
    };
    return RangePipe;
}());
RangePipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'range'
            },] },
];
RangePipe.ctorParameters = function () { return []; };
var PluckPipe = /** @class */ (function () {
    function PluckPipe() {
    }
    PluckPipe.prototype.transform = function (input, key) {
        if (!isArray(input) || !key) {
            return input;
        }
        return input.map(function (value) {
            return getProperty(value, key);
        });
    };
    return PluckPipe;
}());
PluckPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'pluck'
            },] },
];
PluckPipe.ctorParameters = function () { return []; };
var ReversePipe = /** @class */ (function () {
    function ReversePipe() {
    }
    ReversePipe.prototype.transform = function (input) {
        if (!isArray(input)) {
            return input;
        }
        return __spread(input).reverse();
    };
    return ReversePipe;
}());
ReversePipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'reverse'
            },] },
];
ReversePipe.ctorParameters = function () { return []; };
var OrderByPipe = /** @class */ (function () {
    function OrderByPipe() {
    }
    OrderByPipe._orderBy = function (a, b) {
        if (a instanceof Date && b instanceof Date) {
            return (a < b) ? -1 : (a > b) ? 1 : 0;
        }
        var floatA = parseFloat(a);
        var floatB = parseFloat(b);
        if (typeof a === 'string' && typeof b === 'string' && (isNaN(floatA) || isNaN(floatB))) {
            var lowerA = a.toLowerCase();
            var lowerB = b.toLowerCase();
            return (lowerA < lowerB) ? -1 : (lowerA > lowerB) ? 1 : 0;
        }
        return (floatA < floatB) ? -1 : (floatA > floatB) ? 1 : 0;
    };
    OrderByPipe.prototype.transform = function (input, config) {
        if (config === void 0) { config = '+'; }
        if (!isArray(input)) {
            return input;
        }
        var configIsArray = isArray(config);
        if (!configIsArray || (configIsArray && config.length === 1)) {
            var propertyToCheck = configIsArray ? config[0] : config;
            var first = propertyToCheck.substr(0, 1);
            var desc_1 = (first === '-');
            if (!propertyToCheck || propertyToCheck === '-' || propertyToCheck === '+') {
                return __spread(input).sort(function (a, b) {
                    var comparator = OrderByPipe._orderBy(a, b);
                    return desc_1 ? -comparator : comparator;
                });
            }
            else {
                var property_1 = (first === '+' || desc_1) ? propertyToCheck.substr(1) : propertyToCheck;
                return __spread(input).sort(function (a, b) {
                    var comparator = OrderByPipe._orderBy(a[property_1], b[property_1]);
                    return desc_1 ? -comparator : comparator;
                });
            }
        }
        else {
            return __spread(input).sort(function (a, b) {
                for (var i = 0; i < config.length; ++i) {
                    var first = config[i].substr(0, 1);
                    var desc = (first === '-');
                    var property = (first === '+' || desc) ? config[i].substr(1) : config[i];
                    var comparator = OrderByPipe._orderBy(a[property], b[property]);
                    var comparison = desc ? -comparator : comparator;
                    if (comparison !== 0) {
                        return comparison;
                    }
                }
                return 0;
            });
        }
    };
    return OrderByPipe;
}());
OrderByPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'orderBy'
            },] },
];
OrderByPipe.ctorParameters = function () { return []; };
var CountPipe = /** @class */ (function () {
    function CountPipe() {
    }
    CountPipe.prototype.transform = function (input) {
        return count(input);
    };
    return CountPipe;
}());
CountPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'count'
            },] },
];
CountPipe.ctorParameters = function () { return []; };
var SomePipe = /** @class */ (function () {
    function SomePipe() {
    }
    SomePipe.prototype.transform = function (input, predicate) {
        if (!isArray(input) || !predicate) {
            return input;
        }
        var result = false;
        var i = -1;
        while (++i < input.length && !result) {
            result = predicate(input[i], i, input);
        }
        return result;
    };
    return SomePipe;
}());
SomePipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'some'
            },] },
];
SomePipe.ctorParameters = function () { return []; };
var EveryPipe = /** @class */ (function () {
    function EveryPipe() {
    }
    EveryPipe.prototype.transform = function (input, predicate) {
        return every(input, predicate);
    };
    return EveryPipe;
}());
EveryPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'every'
            },] },
];
EveryPipe.ctorParameters = function () { return []; };
var ShufflePipe = /** @class */ (function () {
    function ShufflePipe() {
    }
    ShufflePipe.prototype.transform = function (input) {
        return shuffle(input);
    };
    return ShufflePipe;
}());
ShufflePipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'shuffle'
            },] },
];
ShufflePipe.ctorParameters = function () { return []; };
var TakePipe = /** @class */ (function () {
    function TakePipe() {
    }
    TakePipe.prototype.transform = function (input, quantity) {
        if (!isArray(input)) {
            return input;
        }
        return input.slice(0, quantity || 1);
    };
    return TakePipe;
}());
TakePipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'take'
            },] },
];
TakePipe.ctorParameters = function () { return []; };
var DropPipe = /** @class */ (function () {
    function DropPipe() {
    }
    DropPipe.prototype.transform = function (input, quantity) {
        if (!isArray(input)) {
            return input;
        }
        return input.slice(quantity || 1, input.lenth);
    };
    return DropPipe;
}());
DropPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'drop'
            },] },
];
DropPipe.ctorParameters = function () { return []; };
var DeepPipe = /** @class */ (function () {
    function DeepPipe() {
    }
    DeepPipe.prototype.transform = function (value) {
        if (isDeepObject(value)) {
            return value;
        }
        return wrapDeep(value);
    };
    return DeepPipe;
}());
DeepPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'deep'
            },] },
];
DeepPipe.ctorParameters = function () { return []; };
var ChunkPipe = /** @class */ (function () {
    function ChunkPipe() {
    }
    ChunkPipe.prototype.transform = function (input, size) {
        if (size === void 0) { size = 1; }
        if (!isArray(input)) {
            return input;
        }
        return [].concat.apply([], input.map(function (_elem, i) {
            return i % size ? [] : [input.slice(i, i + size)];
        }));
    };
    return ChunkPipe;
}());
ChunkPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'chunk'
            },] },
];
ChunkPipe.ctorParameters = function () { return []; };
var FlattenPipe = /** @class */ (function () {
    function FlattenPipe() {
    }
    FlattenPipe.prototype.transform = function (input) {
        var isDeep = isDeepObject(input);
        if (!isArray(input) && !isDeep) {
            return input;
        }
        if (isDeep) {
            var unwrapped = unwrapDeep(input);
            if (!isArray(unwrapped)) {
                return unwrapped;
            }
            return flatten(unwrapped, 0);
        }
        return [].concat.apply([], input);
    };
    return FlattenPipe;
}());
FlattenPipe.decorators = [
    { type: core.Pipe, args: [{ name: 'flatten' },] },
];
FlattenPipe.ctorParameters = function () { return []; };
var IntersectionPipe = /** @class */ (function () {
    function IntersectionPipe() {
    }
    IntersectionPipe.prototype.transform = function (a, b) {
        if ((!isArray(a) && !isDeepObject(a)) || !isArray(b)) {
            return [];
        }
        if (isDeepObject(a)) {
            var unwrapped = unwrapDeep(a);
            if (!isArray(unwrapped)) {
                return [];
            }
            return unwrapped.reduce(function (intersection, value) { return intersection.concat((deepIndexOf(b, value) !== -1 && deepIndexOf(intersection, value) === -1) ? value : []); }, []);
        }
        return a.reduce(function (intersection, value) { return intersection.concat((b.indexOf(value) !== -1 && intersection.indexOf(value) === -1) ? value : []); }, []);
    };
    return IntersectionPipe;
}());
IntersectionPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'intersection'
            },] },
];
IntersectionPipe.ctorParameters = function () { return []; };
var UnionPipe = /** @class */ (function () {
    function UnionPipe() {
    }
    UnionPipe.prototype.transform = function (a, b) {
        if ((!isArray(a) && !isDeepObject(a)) || !isArray(b)) {
            return [];
        }
        if (isDeepObject(a)) {
            var unwrapped = unwrapDeep(a);
            if (!isArray(unwrapped)) {
                return [];
            }
            return []
                .concat(unwrapped)
                .concat(b)
                .filter(function (value, index, input) { return deepIndexOf(input, value) === index; });
        }
        return [].concat(a).concat(b).filter(function (value, index, input) { return input.indexOf(value) === index; });
    };
    return UnionPipe;
}());
UnionPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'union'
            },] },
];
UnionPipe.ctorParameters = function () { return []; };
var TakeWhilePipe = /** @class */ (function () {
    function TakeWhilePipe() {
    }
    TakeWhilePipe.prototype.transform = function (input, predicate) {
        if (!isArray(input) || isNil(predicate)) {
            return input;
        }
        return takeWhile(input, predicate);
    };
    return TakeWhilePipe;
}());
TakeWhilePipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'takeWhile'
            },] },
];
TakeWhilePipe.ctorParameters = function () { return []; };
var TakeUntilPipe = /** @class */ (function () {
    function TakeUntilPipe() {
    }
    TakeUntilPipe.prototype.transform = function (input, predicate) {
        if (!isArray(input) || isNil(predicate)) {
            return input;
        }
        return takeUntil(input, predicate);
    };
    return TakeUntilPipe;
}());
TakeUntilPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'takeUntil'
            },] },
];
TakeUntilPipe.ctorParameters = function () { return []; };
var NgArrayPipesModule = /** @class */ (function () {
    function NgArrayPipesModule() {
    }
    return NgArrayPipesModule;
}());
NgArrayPipesModule.decorators = [
    { type: core.NgModule, args: [{
                declarations: [
                    EmptyPipe,
                    HeadPipe,
                    InitialPipe,
                    LastPipe,
                    JoinPipe,
                    TailPipe,
                    UniqPipe,
                    WithoutPipe,
                    MapPipe,
                    WherePipe,
                    RangePipe,
                    PluckPipe,
                    ReversePipe,
                    OrderByPipe,
                    CountPipe,
                    SomePipe,
                    EveryPipe,
                    ShufflePipe,
                    TakePipe,
                    DropPipe,
                    DeepPipe,
                    ChunkPipe,
                    FlattenPipe,
                    FirstOrDefaultPipe,
                    IntersectionPipe,
                    UnionPipe,
                    TakeWhilePipe,
                    TakeUntilPipe
                ],
                exports: [
                    EmptyPipe,
                    HeadPipe,
                    InitialPipe,
                    LastPipe,
                    JoinPipe,
                    TailPipe,
                    UniqPipe,
                    WithoutPipe,
                    MapPipe,
                    WherePipe,
                    RangePipe,
                    PluckPipe,
                    ReversePipe,
                    OrderByPipe,
                    CountPipe,
                    SomePipe,
                    EveryPipe,
                    ShufflePipe,
                    TakePipe,
                    DropPipe,
                    DeepPipe,
                    ChunkPipe,
                    FlattenPipe,
                    FirstOrDefaultPipe,
                    IntersectionPipe,
                    UnionPipe,
                    TakeWhilePipe,
                    TakeUntilPipe
                ]
            },] },
];
NgArrayPipesModule.ctorParameters = function () { return []; };
var IsGreaterPipe = /** @class */ (function () {
    function IsGreaterPipe() {
    }
    IsGreaterPipe.prototype.transform = function (first, second) {
        return first > second;
    };
    return IsGreaterPipe;
}());
IsGreaterPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'greater'
            },] },
];
IsGreaterPipe.ctorParameters = function () { return []; };
var IsGreaterOrEqualPipe = /** @class */ (function () {
    function IsGreaterOrEqualPipe() {
    }
    IsGreaterOrEqualPipe.prototype.transform = function (first, second) {
        return first >= second;
    };
    return IsGreaterOrEqualPipe;
}());
IsGreaterOrEqualPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'greaterOrEqual'
            },] },
];
IsGreaterOrEqualPipe.ctorParameters = function () { return []; };
var IsLessPipe = /** @class */ (function () {
    function IsLessPipe() {
    }
    IsLessPipe.prototype.transform = function (first, second) {
        return first < second;
    };
    return IsLessPipe;
}());
IsLessPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'less'
            },] },
];
IsLessPipe.ctorParameters = function () { return []; };
var IsLessOrEqualPipe = /** @class */ (function () {
    function IsLessOrEqualPipe() {
    }
    IsLessOrEqualPipe.prototype.transform = function (first, second) {
        return first <= second;
    };
    return IsLessOrEqualPipe;
}());
IsLessOrEqualPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'lessOrEqual'
            },] },
];
IsLessOrEqualPipe.ctorParameters = function () { return []; };
var IsEqualPipe = /** @class */ (function () {
    function IsEqualPipe() {
    }
    IsEqualPipe.prototype.transform = function (first, second) {
        return first == second;
    };
    return IsEqualPipe;
}());
IsEqualPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'equal'
            },] },
];
IsEqualPipe.ctorParameters = function () { return []; };
var IsNotEqualPipe = /** @class */ (function () {
    function IsNotEqualPipe() {
    }
    IsNotEqualPipe.prototype.transform = function (first, second) {
        return first != second;
    };
    return IsNotEqualPipe;
}());
IsNotEqualPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'notEqual'
            },] },
];
IsNotEqualPipe.ctorParameters = function () { return []; };
var IsIdenticalPipe = /** @class */ (function () {
    function IsIdenticalPipe() {
    }
    IsIdenticalPipe.prototype.transform = function (first, second) {
        return first === second;
    };
    return IsIdenticalPipe;
}());
IsIdenticalPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'identical'
            },] },
];
IsIdenticalPipe.ctorParameters = function () { return []; };
var IsNotIdenticalPipe = /** @class */ (function () {
    function IsNotIdenticalPipe() {
    }
    IsNotIdenticalPipe.prototype.transform = function (first, second) {
        return first !== second;
    };
    return IsNotIdenticalPipe;
}());
IsNotIdenticalPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'notIdentical'
            },] },
];
IsNotIdenticalPipe.ctorParameters = function () { return []; };
var IsNullPipe = /** @class */ (function () {
    function IsNullPipe() {
    }
    IsNullPipe.prototype.transform = function (value) {
        return isNull(value);
    };
    return IsNullPipe;
}());
IsNullPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'isNull'
            },] },
];
IsNullPipe.ctorParameters = function () { return []; };
var IsUndefinedPipe = /** @class */ (function () {
    function IsUndefinedPipe() {
    }
    IsUndefinedPipe.prototype.transform = function (value) {
        return isUndefined(value);
    };
    return IsUndefinedPipe;
}());
IsUndefinedPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'isUndefined'
            },] },
];
IsUndefinedPipe.ctorParameters = function () { return []; };
var IsNilPipe = /** @class */ (function () {
    function IsNilPipe() {
    }
    IsNilPipe.prototype.transform = function (value) {
        return isNil(value);
    };
    return IsNilPipe;
}());
IsNilPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'isNil'
            },] },
];
IsNilPipe.ctorParameters = function () { return []; };
var IsFunctionPipe = /** @class */ (function () {
    function IsFunctionPipe() {
    }
    IsFunctionPipe.prototype.transform = function (value) {
        return isFunction(value);
    };
    return IsFunctionPipe;
}());
IsFunctionPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'isFunction'
            },] },
];
IsFunctionPipe.ctorParameters = function () { return []; };
var IsNumberPipe = /** @class */ (function () {
    function IsNumberPipe() {
    }
    IsNumberPipe.prototype.transform = function (value) {
        return isNumber(value);
    };
    return IsNumberPipe;
}());
IsNumberPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'isNumber'
            },] },
];
IsNumberPipe.ctorParameters = function () { return []; };
var IsStringPipe = /** @class */ (function () {
    function IsStringPipe() {
    }
    IsStringPipe.prototype.transform = function (value) {
        return isString(value);
    };
    return IsStringPipe;
}());
IsStringPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'isString'
            },] },
];
IsStringPipe.ctorParameters = function () { return []; };
var IsArrayPipe = /** @class */ (function () {
    function IsArrayPipe() {
    }
    IsArrayPipe.prototype.transform = function (value) {
        return isArray(value);
    };
    return IsArrayPipe;
}());
IsArrayPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'isArray'
            },] },
];
IsArrayPipe.ctorParameters = function () { return []; };
var IsObjectPipe = /** @class */ (function () {
    function IsObjectPipe() {
    }
    IsObjectPipe.prototype.transform = function (value) {
        return isObject(value);
    };
    return IsObjectPipe;
}());
IsObjectPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'isObject'
            },] },
];
IsObjectPipe.ctorParameters = function () { return []; };
var IsDefinedPipe = /** @class */ (function () {
    function IsDefinedPipe() {
    }
    IsDefinedPipe.prototype.transform = function (value) {
        return !isUndefined(value);
    };
    return IsDefinedPipe;
}());
IsDefinedPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'isDefined'
            },] },
];
IsDefinedPipe.ctorParameters = function () { return []; };
var NgBooleanPipesModule = /** @class */ (function () {
    function NgBooleanPipesModule() {
    }
    return NgBooleanPipesModule;
}());
NgBooleanPipesModule.decorators = [
    { type: core.NgModule, args: [{
                declarations: [
                    IsGreaterPipe,
                    IsGreaterOrEqualPipe,
                    IsLessPipe,
                    IsLessOrEqualPipe,
                    IsEqualPipe,
                    IsNotEqualPipe,
                    IsIdenticalPipe,
                    IsNotIdenticalPipe,
                    IsNilPipe,
                    IsNullPipe,
                    IsUndefinedPipe,
                    IsFunctionPipe,
                    IsNumberPipe,
                    IsStringPipe,
                    IsArrayPipe,
                    IsObjectPipe,
                    IsDefinedPipe
                ],
                exports: [
                    IsGreaterPipe,
                    IsGreaterOrEqualPipe,
                    IsLessPipe,
                    IsLessOrEqualPipe,
                    IsEqualPipe,
                    IsNotEqualPipe,
                    IsIdenticalPipe,
                    IsNotIdenticalPipe,
                    IsNilPipe,
                    IsNullPipe,
                    IsUndefinedPipe,
                    IsFunctionPipe,
                    IsNumberPipe,
                    IsStringPipe,
                    IsArrayPipe,
                    IsObjectPipe,
                    IsDefinedPipe
                ]
            },] },
];
NgBooleanPipesModule.ctorParameters = function () { return []; };
var BytesPipe = /** @class */ (function () {
    function BytesPipe() {
    }
    BytesPipe.prototype.transform = function (input, decimal, from, to) {
        if (decimal === void 0) { decimal = 0; }
        if (from === void 0) { from = 'B'; }
        if (!(isNumberFinite(input) &&
            isNumberFinite(decimal) &&
            isInteger(decimal) &&
            isPositive(decimal))) {
            return input;
        }
        var bytes = input;
        var unit = from;
        while (unit !== 'B') {
            bytes *= 1024;
            unit = ((BytesPipe.formats[unit].prev));
        }
        if (to) {
            var format = BytesPipe.formats[to];
            var result = toDecimal(BytesPipe.calculateResult(format, bytes), decimal);
            return BytesPipe.formatResult(result, to);
        }
        for (var key in BytesPipe.formats) {
            var format = BytesPipe.formats[key];
            if (bytes < format.max) {
                var result = toDecimal(BytesPipe.calculateResult(format, bytes), decimal);
                return BytesPipe.formatResult(result, key);
            }
        }
    };
    BytesPipe.formatResult = function (result, unit) {
        return result + " " + unit;
    };
    BytesPipe.calculateResult = function (format, bytes) {
        var prev = format.prev ? BytesPipe.formats[format.prev] : undefined;
        return prev ? bytes / prev.max : bytes;
    };
    return BytesPipe;
}());
BytesPipe.formats = {
    'B': { max: 1024 },
    'KB': { max: Math.pow(1024, 2), prev: 'B' },
    'MB': { max: Math.pow(1024, 3), prev: 'KB' },
    'GB': { max: Math.pow(1024, 4), prev: 'MB' },
    'TB': { max: Number.MAX_SAFE_INTEGER, prev: 'GB' }
};
BytesPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'bytes'
            },] },
];
BytesPipe.ctorParameters = function () { return []; };
var CeilPipe = /** @class */ (function () {
    function CeilPipe() {
    }
    CeilPipe.prototype.transform = function (value, precision) {
        if (precision === void 0) { precision = 0; }
        if (isString(precision)) {
            precision = parseInt(precision);
        }
        return createRound('ceil')(value, precision);
    };
    return CeilPipe;
}());
CeilPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'ceil'
            },] },
];
CeilPipe.ctorParameters = function () { return []; };
var FloorPipe = /** @class */ (function () {
    function FloorPipe() {
    }
    FloorPipe.prototype.transform = function (value, precision) {
        if (precision === void 0) { precision = 0; }
        if (isString(precision)) {
            precision = parseInt(precision);
        }
        return createRound('floor')(value, precision);
    };
    return FloorPipe;
}());
FloorPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'floor'
            },] },
];
FloorPipe.ctorParameters = function () { return []; };
var RoundPipe = /** @class */ (function () {
    function RoundPipe() {
    }
    RoundPipe.prototype.transform = function (value, precision) {
        if (precision === void 0) { precision = 0; }
        if (isString(precision)) {
            precision = parseInt(precision);
        }
        return createRound('round')(value, precision);
    };
    return RoundPipe;
}());
RoundPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'round'
            },] },
];
RoundPipe.ctorParameters = function () { return []; };
var DegreesPipe = /** @class */ (function () {
    function DegreesPipe() {
    }
    DegreesPipe.prototype.transform = function (input) {
        if (!isNumberFinite(input)) {
            return 'NaN';
        }
        return (input * 180) / Math.PI;
    };
    return DegreesPipe;
}());
DegreesPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'degrees'
            },] },
];
DegreesPipe.ctorParameters = function () { return []; };
var RadiansPipe = /** @class */ (function () {
    function RadiansPipe() {
    }
    RadiansPipe.prototype.transform = function (input) {
        if (!isNumberFinite(input)) {
            return 'NaN';
        }
        return (input * Math.PI) / 180;
    };
    return RadiansPipe;
}());
RadiansPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'radians'
            },] },
];
RadiansPipe.ctorParameters = function () { return []; };
var RandomPipe = /** @class */ (function () {
    function RandomPipe() {
    }
    RandomPipe.prototype.transform = function (input, min, max) {
        if (min === void 0) { min = 0; }
        if (max === void 0) { max = 1; }
        if (!isNumberFinite(min) || !isNumberFinite(max)) {
            return input;
        }
        if (min > max) {
            max = min;
            min = 0;
        }
        return Math.random() * (max - min) + min;
    };
    return RandomPipe;
}());
RandomPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'random'
            },] },
];
RandomPipe.ctorParameters = function () { return []; };
var SqrtPipe = /** @class */ (function () {
    function SqrtPipe() {
    }
    SqrtPipe.prototype.transform = function (input) {
        if (!isNumberFinite(input)) {
            return 'NaN';
        }
        return Math.sqrt(input);
    };
    return SqrtPipe;
}());
SqrtPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'sqrt'
            },] },
];
SqrtPipe.ctorParameters = function () { return []; };
var PowPipe = /** @class */ (function () {
    function PowPipe() {
    }
    PowPipe.prototype.transform = function (input, power) {
        if (power === void 0) { power = 2; }
        if (!isNumberFinite(input)) {
            return 'NaN';
        }
        return Math.pow(input, power);
    };
    return PowPipe;
}());
PowPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'pow'
            },] },
];
PowPipe.ctorParameters = function () { return []; };
var NgMathPipesModule = /** @class */ (function () {
    function NgMathPipesModule() {
    }
    return NgMathPipesModule;
}());
NgMathPipesModule.decorators = [
    { type: core.NgModule, args: [{
                declarations: [
                    BytesPipe,
                    CeilPipe,
                    FloorPipe,
                    RoundPipe,
                    DegreesPipe,
                    RadiansPipe,
                    RandomPipe,
                    SqrtPipe,
                    PowPipe
                ],
                exports: [
                    BytesPipe,
                    CeilPipe,
                    FloorPipe,
                    RoundPipe,
                    DegreesPipe,
                    RadiansPipe,
                    RandomPipe,
                    SqrtPipe,
                    PowPipe
                ]
            },] },
];
NgMathPipesModule.ctorParameters = function () { return []; };
var KeysPipe = /** @class */ (function () {
    function KeysPipe() {
    }
    KeysPipe.prototype.transform = function (input) {
        if (!isObject(input)) {
            return input;
        }
        return Object.keys(input);
    };
    return KeysPipe;
}());
KeysPipe.decorators = [
    { type: core.Pipe, args: [{ name: 'keys' },] },
];
KeysPipe.ctorParameters = function () { return []; };
var ToArrayPipe = /** @class */ (function () {
    function ToArrayPipe() {
    }
    ToArrayPipe.prototype.transform = function (input) {
        if (!isObject(input)) {
            return input;
        }
        return Object.keys(input).map(function (value) { return input[value]; });
    };
    return ToArrayPipe;
}());
ToArrayPipe.decorators = [
    { type: core.Pipe, args: [{ name: 'toArray' },] },
];
ToArrayPipe.ctorParameters = function () { return []; };
var DefaultsPipe = /** @class */ (function () {
    function DefaultsPipe() {
    }
    DefaultsPipe.prototype.transform = function (input, defaults) {
        if (!isObject(defaults)) {
            return input;
        }
        if (isNil(input)) {
            return defaults;
        }
        if (isArray(input)) {
            return input.map(function (item) {
                if (isObject(item)) {
                    return Object.assign({}, defaults, item);
                }
                if (isNil(item)) {
                    return defaults;
                }
                return item;
            });
        }
        if (isObject(input)) {
            return Object.assign({}, defaults, input);
        }
        return input;
    };
    return DefaultsPipe;
}());
DefaultsPipe.decorators = [
    { type: core.Pipe, args: [{ name: 'defaults' },] },
];
DefaultsPipe.ctorParameters = function () { return []; };
var NgObjectPipesModule = /** @class */ (function () {
    function NgObjectPipesModule() {
    }
    return NgObjectPipesModule;
}());
NgObjectPipesModule.decorators = [
    { type: core.NgModule, args: [{
                declarations: [
                    KeysPipe,
                    ToArrayPipe,
                    DefaultsPipe
                ],
                exports: [
                    KeysPipe,
                    ToArrayPipe,
                    DefaultsPipe
                ]
            },] },
];
NgObjectPipesModule.ctorParameters = function () { return []; };
var LeftPadPipe = /** @class */ (function () {
    function LeftPadPipe() {
    }
    LeftPadPipe.prototype.transform = function (input, length, character) {
        if (length === void 0) { length = 0; }
        if (character === void 0) { character = ' '; }
        if (!isString(input)) {
            return input;
        }
        return leftPad(input, length, character);
    };
    return LeftPadPipe;
}());
LeftPadPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'leftpad'
            },] },
];
LeftPadPipe.ctorParameters = function () { return []; };
var MatchPipe = /** @class */ (function () {
    function MatchPipe() {
    }
    MatchPipe.prototype.transform = function (input, pattern, flag) {
        if (!isString(input)) {
            return input;
        }
        var regexp = pattern instanceof RegExp ? pattern : new RegExp(pattern, flag);
        return input.match(regexp);
    };
    return MatchPipe;
}());
MatchPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'match'
            },] },
];
MatchPipe.ctorParameters = function () { return []; };
var PadPipe = /** @class */ (function () {
    function PadPipe() {
    }
    PadPipe.prototype.transform = function (input, length, character) {
        if (length === void 0) { length = 0; }
        if (character === void 0) { character = ' '; }
        if (!isString(input)) {
            return input;
        }
        return pad(input, length, character);
    };
    return PadPipe;
}());
PadPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'pad'
            },] },
];
PadPipe.ctorParameters = function () { return []; };
var ReplacePipe = /** @class */ (function () {
    function ReplacePipe() {
    }
    ReplacePipe.prototype.transform = function (input, pattern, replacement) {
        if (!isString(input) || !pattern || !replacement) {
            return input;
        }
        return input.replace(pattern, replacement);
    };
    return ReplacePipe;
}());
ReplacePipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'replace'
            },] },
];
ReplacePipe.ctorParameters = function () { return []; };
var RightPadPipe = /** @class */ (function () {
    function RightPadPipe() {
    }
    RightPadPipe.prototype.transform = function (input, length, character) {
        if (length === void 0) { length = 0; }
        if (character === void 0) { character = ' '; }
        if (!isString(input)) {
            return input;
        }
        return rightPad(input, length, character);
    };
    return RightPadPipe;
}());
RightPadPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'rightpad'
            },] },
];
RightPadPipe.ctorParameters = function () { return []; };
var SplitPipe = /** @class */ (function () {
    function SplitPipe() {
    }
    SplitPipe.prototype.transform = function (input, separator, limit) {
        if (separator === void 0) { separator = ' '; }
        if (!isString(input)) {
            return input;
        }
        return input.split(separator, limit);
    };
    return SplitPipe;
}());
SplitPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'split'
            },] },
];
SplitPipe.ctorParameters = function () { return []; };
var TestPipe = /** @class */ (function () {
    function TestPipe() {
    }
    TestPipe.prototype.transform = function (input, pattern, flag) {
        if (!isString(input) || !pattern) {
            return input;
        }
        var regexp = pattern instanceof RegExp ? pattern : new RegExp(pattern, flag);
        return regexp.test(input);
    };
    return TestPipe;
}());
TestPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'test'
            },] },
];
TestPipe.ctorParameters = function () { return []; };
var TrimPipe = /** @class */ (function () {
    function TrimPipe() {
    }
    TrimPipe.prototype.transform = function (input) {
        if (!isString(input)) {
            return input;
        }
        return input.trim();
    };
    return TrimPipe;
}());
TrimPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'trim'
            },] },
];
TrimPipe.ctorParameters = function () { return []; };
var NewlinesPipe = /** @class */ (function () {
    function NewlinesPipe() {
    }
    NewlinesPipe.prototype.transform = function (input) {
        if (!isString(input)) {
            return input;
        }
        return input.replace(/(?:\r\n|\r|\n)/g, '<br />');
    };
    return NewlinesPipe;
}());
NewlinesPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'newlines'
            },] },
];
NewlinesPipe.ctorParameters = function () { return []; };
var CapitalizePipe = /** @class */ (function () {
    function CapitalizePipe() {
    }
    CapitalizePipe.prototype.transform = function (input, all) {
        if (all === void 0) { all = false; }
        if (!isString(input)) {
            return input;
        }
        if (!all) {
            return upperFirst(input.toLowerCase());
        }
        else {
            return input.toLowerCase()
                .split(' ')
                .map(function (value) { return upperFirst(value); })
                .join(' ');
        }
    };
    return CapitalizePipe;
}());
CapitalizePipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'capitalize'
            },] },
];
CapitalizePipe.ctorParameters = function () { return []; };
var UpperFirstPipe = /** @class */ (function () {
    function UpperFirstPipe() {
    }
    UpperFirstPipe.prototype.transform = function (input) {
        if (!isString(input)) {
            return input;
        }
        return upperFirst(input);
    };
    return UpperFirstPipe;
}());
UpperFirstPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'upperfirst'
            },] },
];
UpperFirstPipe.ctorParameters = function () { return []; };
var TemplatePipe = /** @class */ (function () {
    function TemplatePipe() {
    }
    TemplatePipe.prototype.transform = function (input) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (!isString(input) || args.length === 0) {
            return input;
        }
        var template = input;
        for (var i = 0; i < args.length; ++i) {
            template = template.replace("$" + (i + 1), args[i]);
        }
        return template;
    };
    return TemplatePipe;
}());
TemplatePipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'template'
            },] },
];
TemplatePipe.ctorParameters = function () { return []; };
var EncodeURIPipe = /** @class */ (function () {
    function EncodeURIPipe() {
    }
    EncodeURIPipe.prototype.transform = function (input) {
        if (!isString(input)) {
            return input;
        }
        return encodeURI(input);
    };
    return EncodeURIPipe;
}());
EncodeURIPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'encodeURI'
            },] },
];
EncodeURIPipe.ctorParameters = function () { return []; };
var EncodeURIComponentPipe = /** @class */ (function () {
    function EncodeURIComponentPipe() {
    }
    EncodeURIComponentPipe.prototype.transform = function (input) {
        if (!isString(input)) {
            return input;
        }
        return encodeURIComponent(input);
    };
    return EncodeURIComponentPipe;
}());
EncodeURIComponentPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'encodeURIComponent'
            },] },
];
EncodeURIComponentPipe.ctorParameters = function () { return []; };
var DecodeURIPipe = /** @class */ (function () {
    function DecodeURIPipe() {
    }
    DecodeURIPipe.prototype.transform = function (input) {
        if (!isString(input)) {
            return input;
        }
        return decodeURI(input);
    };
    return DecodeURIPipe;
}());
DecodeURIPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'decodeURI'
            },] },
];
DecodeURIPipe.ctorParameters = function () { return []; };
var DecodeURIComponentPipe = /** @class */ (function () {
    function DecodeURIComponentPipe() {
    }
    DecodeURIComponentPipe.prototype.transform = function (input) {
        if (!isString(input)) {
            return input;
        }
        return decodeURIComponent(input);
    };
    return DecodeURIComponentPipe;
}());
DecodeURIComponentPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'decodeURIComponent'
            },] },
];
DecodeURIComponentPipe.ctorParameters = function () { return []; };
var TruncatePipe = /** @class */ (function () {
    function TruncatePipe() {
    }
    TruncatePipe.prototype.transform = function (input, length, suffix, preserve) {
        if (!isString(input)) {
            return input;
        }
        length = isUndefined(length) ? input.length : length;
        if (input.length <= length) {
            return input;
        }
        preserve = preserve || false;
        suffix = suffix || '';
        var index = length;
        if (preserve) {
            if (input.indexOf(' ', length) === -1) {
                index = input.length;
            }
            else {
                index = input.indexOf(' ', length);
            }
        }
        return input.substring(0, index) + suffix;
    };
    return TruncatePipe;
}());
TruncatePipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'truncate'
            },] },
];
TruncatePipe.ctorParameters = function () { return []; };
var RepeatPipe = /** @class */ (function () {
    function RepeatPipe() {
    }
    RepeatPipe.prototype.transform = function (input, times, characters) {
        if (times === void 0) { times = 1; }
        if (characters === void 0) { characters = ''; }
        if (!isString(input)) {
            return input;
        }
        if (times <= 0) {
            times = 1;
        }
        var repeated = [input];
        for (var i = 1; i < times; ++i) {
            repeated.push(input);
        }
        return repeated.join(characters);
    };
    return RepeatPipe;
}());
RepeatPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'repeat'
            },] },
];
RepeatPipe.ctorParameters = function () { return []; };
var SlugifyPipe = /** @class */ (function () {
    function SlugifyPipe() {
    }
    SlugifyPipe.prototype.transform = function (input) {
        if (!isString(input)) {
            return input;
        }
        return (input
            .toLowerCase()
            .trim()
            .replace(/[^a-z0-9\s-]/g, ' ')
            .replace(/[\s-]+/g, '-'));
    };
    return SlugifyPipe;
}());
SlugifyPipe.decorators = [
    { type: core.Pipe, args: [{ name: 'slugify' },] },
];
SlugifyPipe.ctorParameters = function () { return []; };
var StripTagsPipe = /** @class */ (function () {
    function StripTagsPipe() {
    }
    StripTagsPipe.prototype.transform = function (input) {
        if (!isString(input) || isUndefined(input))
            return input;
        return input.replace(/<\S[^><]*>/g, '');
    };
    return StripTagsPipe;
}());
StripTagsPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'stripTags'
            },] },
];
StripTagsPipe.ctorParameters = function () { return []; };
var LatinizePipe = /** @class */ (function () {
    function LatinizePipe() {
    }
    LatinizePipe.prototype.transform = function (input) {
        if (!isString(input) || isUndefined(input)) {
            return input;
        }
        var replacementList = [
            { base: ' ', chars: "\u00A0" },
            { base: '0', chars: "\u07C0" },
            { base: 'A', chars: "\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F" },
            { base: 'AA', chars: "\uA732" },
            { base: 'AE', chars: "\u00C6\u01FC\u01E2" },
            { base: 'AO', chars: "\uA734" },
            { base: 'AU', chars: "\uA736" },
            { base: 'AV', chars: "\uA738\uA73A" },
            { base: 'AY', chars: "\uA73C" },
            { base: 'B', chars: "\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0181" },
            { base: 'C', chars: "\u24b8\uff23\uA73E\u1E08\u0106\u0043\u0108\u010A\u010C\u00C7\u0187\u023B" },
            { base: 'D', chars: "\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018A\u0189\u1D05\uA779" },
            { base: 'Dh', chars: "\u00D0" },
            { base: 'DZ', chars: "\u01F1\u01C4" },
            { base: 'Dz', chars: "\u01F2\u01C5" },
            { base: 'E', chars: "\u025B\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E\u1D07" },
            { base: 'F', chars: "\uA77C\u24BB\uFF26\u1E1E\u0191\uA77B" },
            { base: 'G', chars: "\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E\u0262" },
            { base: 'H', chars: "\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D" },
            { base: 'I', chars: "\u24BE\uFF29\xCC\xCD\xCE\u0128\u012A\u012C\u0130\xCF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197" },
            { base: 'J', chars: "\u24BF\uFF2A\u0134\u0248\u0237" },
            { base: 'K', chars: "\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2" },
            { base: 'L', chars: "\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780" },
            { base: 'LJ', chars: "\u01C7" },
            { base: 'Lj', chars: "\u01C8" },
            { base: 'M', chars: "\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C\u03FB" },
            { base: 'N', chars: "\uA7A4\u0220\u24C3\uFF2E\u01F8\u0143\xD1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u019D\uA790\u1D0E" },
            { base: 'NJ', chars: "\u01CA" },
            { base: 'Nj', chars: "\u01CB" },
            { base: 'O', chars: "\u24C4\uFF2F\xD2\xD3\xD4\u1ED2\u1ED0\u1ED6\u1ED4\xD5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\xD6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\xD8\u01FE\u0186\u019F\uA74A\uA74C" },
            { base: 'OE', chars: "\u0152" },
            { base: 'OI', chars: "\u01A2" },
            { base: 'OO', chars: "\uA74E" },
            { base: 'OU', chars: "\u0222" },
            { base: 'P', chars: "\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754" },
            { base: 'Q', chars: "\u24C6\uFF31\uA756\uA758\u024A" },
            { base: 'R', chars: "\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782" },
            { base: 'S', chars: "\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784" },
            { base: 'T', chars: "\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786" },
            { base: 'Th', chars: "\u00DE" },
            { base: 'TZ', chars: "\uA728" },
            { base: 'U', chars: "\u24CA\uFF35\xD9\xDA\xDB\u0168\u1E78\u016A\u1E7A\u016C\xDC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244" },
            { base: 'V', chars: "\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245" },
            { base: 'VY', chars: "\uA760" },
            { base: 'W', chars: "\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72" },
            { base: 'X', chars: "\u24CD\uFF38\u1E8A\u1E8C" },
            { base: 'Y', chars: "\u24CE\uFF39\u1EF2\xDD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE" },
            { base: 'Z', chars: "\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762" },
            { base: 'a', chars: "\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250\u0251" },
            { base: 'aa', chars: "\uA733" },
            { base: 'ae', chars: "\u00E6\u01FD\u01E3" },
            { base: 'ao', chars: "\uA735" },
            { base: 'au', chars: "\uA737" },
            { base: 'av', chars: "\uA739\uA73B" },
            { base: 'ay', chars: "\uA73D" },
            { base: 'b', chars: "\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253\u0182" },
            { base: 'c', chars: "\uFF43\u24D2\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184" },
            { base: 'd', chars: "\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\u018B\u13E7\u0501\uA7AA" },
            { base: 'dh', chars: "\u00F0" },
            { base: 'dz', chars: "\u01F3\u01C6" },
            { base: 'e', chars: "\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u01DD", }, { base: 'f', chars: "\u24D5\uFF46\u1E1F\u0192" },
            { base: 'ff', chars: "\uFB00" },
            { base: 'fi', chars: "\uFB01" },
            { base: 'fl', chars: "\uFB02" },
            { base: 'ffi', chars: "\uFB03" },
            { base: 'ffl', chars: "\uFB04" },
            { base: 'g', chars: "\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\uA77F\u1D79" },
            { base: 'h', chars: "\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265" },
            { base: 'hv', chars: "\u0195" },
            { base: 'i', chars: "\u24D8\uFF49\xEC\xED\xEE\u0129\u012B\u012D\xEF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131" },
            { base: 'j', chars: "\u24D9\uFF4A\u0135\u01F0\u0249" },
            { base: 'k', chars: "\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3" },
            { base: 'l', chars: "\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747\u026D" },
            { base: 'lj', chars: "\u01C9" },
            { base: 'm', chars: "\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F" },
            { base: 'n', chars: "\u24DD\uFF4E\u01F9\u0144\xF1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5\u043B\u0509" },
            { base: 'nj', chars: "\u01CC" },
            { base: 'o', chars: "\u24DE\uFF4F\xF2\xF3\xF4\u1ED3\u1ED1\u1ED7\u1ED5\xF5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\xF6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\xF8\u01FF\uA74B\uA74D\u0275\u0254\u1D11" },
            { base: 'oe', chars: "\u0153" },
            { base: 'oi', chars: "\u01A3" },
            { base: 'oo', chars: "\uA74F" },
            { base: 'ou', chars: "\u0223" },
            { base: 'p', chars: "\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755\u03C1" },
            { base: 'q', chars: "\u24E0\uFF51\u024B\uA757\uA759" },
            { base: 'r', chars: "\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783" },
            { base: 's', chars: "\u24E2\uFF53\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B\u0282" },
            { base: 'ss', chars: "\xDF" },
            { base: 't', chars: "\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787" },
            { base: 'th', chars: "\u00FE" },
            { base: 'tz', chars: "\uA729" },
            { base: 'u', chars: "\u24E4\uFF55\xF9\xFA\xFB\u0169\u1E79\u016B\u1E7B\u016D\xFC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289" },
            { base: 'v', chars: "\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C" },
            { base: 'vy', chars: "\uA761" },
            { base: 'w', chars: "\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73" },
            { base: 'x', chars: "\u24E7\uFF58\u1E8B\u1E8D" },
            { base: 'y', chars: "\u24E8\uFF59\u1EF3\xFD\u0177\u1EF9\u0233\u1E8F\xFF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF" },
            { base: 'z', chars: "\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763" }
        ];
        var diacriticsMap = {};
        for (var i = 0; i < replacementList.length; i += 1) {
            var chars = replacementList[i].chars;
            for (var j = 0; j < chars.length; j += 1) {
                diacriticsMap[chars[j]] = replacementList[i].base;
            }
        }
        return input.replace(/[^\u0000-\u007e]/g, function (c) { return diacriticsMap[c] || c; });
    };
    return LatinizePipe;
}());
LatinizePipe.decorators = [
    { type: core.Pipe, args: [{ name: 'latinize' },] },
];
LatinizePipe.ctorParameters = function () { return []; };
var WrapPipe = /** @class */ (function () {
    function WrapPipe() {
    }
    WrapPipe.prototype.transform = function (input, wrap, ends) {
        return (isString(input) && !isUndefined(wrap)) ? [wrap, input, ends || wrap].join('') : input;
    };
    return WrapPipe;
}());
WrapPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'wrap'
            },] },
];
WrapPipe.ctorParameters = function () { return []; };
var WithPipe = /** @class */ (function () {
    function WithPipe() {
    }
    WithPipe.prototype.transform = function (input, start, ends, csensitive) {
        if (start === void 0) { start = null; }
        if (ends === void 0) { ends = null; }
        if (csensitive === void 0) { csensitive = false; }
        if (!isString(input) || (isNull(start) && isNull(ends)) || (start == '') || (ends == '')) {
            return input;
        }
        input = (csensitive) ? input : input.toLowerCase();
        if (!isNull(start) && !isNull(ends)) {
            var a = !input.indexOf((csensitive) ? start : start.toLowerCase());
            var b = input.indexOf((csensitive) ? ends : ends.toLowerCase(), (input.length - ends.length)) !== -1;
            if (a == true && b == true) {
                return true;
            }
            else {
                return false;
            }
        }
        if (!isNull(start)) {
            return !input.indexOf((csensitive) ? start : start.toLowerCase());
        }
        if (!isNull(ends)) {
            var position = input.length - ends.length;
            return input.indexOf((csensitive) ? ends : ends.toLowerCase(), position) !== -1;
        }
    };
    return WithPipe;
}());
WithPipe.decorators = [
    { type: core.Pipe, args: [{ name: 'with' },] },
];
WithPipe.ctorParameters = function () { return []; };
var ReverseStrPipe = /** @class */ (function () {
    function ReverseStrPipe() {
    }
    ReverseStrPipe.prototype.transform = function (input) {
        if (!isString(input)) {
            return input;
        }
        return Array.from(input).reverse().join('');
    };
    return ReverseStrPipe;
}());
ReverseStrPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'reverseStr'
            },] },
];
ReverseStrPipe.ctorParameters = function () { return []; };
var NgStringPipesModule = /** @class */ (function () {
    function NgStringPipesModule() {
    }
    return NgStringPipesModule;
}());
NgStringPipesModule.decorators = [
    { type: core.NgModule, args: [{
                declarations: [
                    LeftPadPipe,
                    MatchPipe,
                    PadPipe,
                    ReplacePipe,
                    RightPadPipe,
                    SplitPipe,
                    TestPipe,
                    TrimPipe,
                    NewlinesPipe,
                    CapitalizePipe,
                    UpperFirstPipe,
                    TemplatePipe,
                    EncodeURIPipe,
                    EncodeURIComponentPipe,
                    DecodeURIPipe,
                    DecodeURIComponentPipe,
                    TruncatePipe,
                    RepeatPipe,
                    SlugifyPipe,
                    StripTagsPipe,
                    LatinizePipe,
                    WrapPipe,
                    WithPipe,
                    ReverseStrPipe
                ],
                exports: [
                    LeftPadPipe,
                    MatchPipe,
                    PadPipe,
                    ReplacePipe,
                    RightPadPipe,
                    SplitPipe,
                    TestPipe,
                    TrimPipe,
                    NewlinesPipe,
                    CapitalizePipe,
                    UpperFirstPipe,
                    TemplatePipe,
                    EncodeURIPipe,
                    EncodeURIComponentPipe,
                    DecodeURIPipe,
                    DecodeURIComponentPipe,
                    TruncatePipe,
                    RepeatPipe,
                    SlugifyPipe,
                    StripTagsPipe,
                    LatinizePipe,
                    WrapPipe,
                    WithPipe,
                    ReverseStrPipe
                ]
            },] },
];
NgStringPipesModule.ctorParameters = function () { return []; };
var NgPipesModule = /** @class */ (function () {
    function NgPipesModule() {
    }
    return NgPipesModule;
}());
NgPipesModule.decorators = [
    { type: core.NgModule, args: [{
                exports: [
                    NgArrayPipesModule,
                    NgMathPipesModule,
                    NgBooleanPipesModule,
                    NgStringPipesModule,
                    NgObjectPipesModule,
                    NgAggregatePipesModule
                ]
            },] },
];
NgPipesModule.ctorParameters = function () { return []; };

exports.NgAggregatePipesModule = NgAggregatePipesModule;
exports.NgArrayPipesModule = NgArrayPipesModule;
exports.NgBooleanPipesModule = NgBooleanPipesModule;
exports.NgMathPipesModule = NgMathPipesModule;
exports.NgObjectPipesModule = NgObjectPipesModule;
exports.NgStringPipesModule = NgStringPipesModule;
exports.NgPipesModule = NgPipesModule;
exports.GroupByPipe = GroupByPipe;
exports.MaxPipe = MaxPipe;
exports.MeanPipe = MeanPipe;
exports.MinPipe = MinPipe;
exports.SumPipe = SumPipe;
exports.EmptyPipe = EmptyPipe;
exports.HeadPipe = HeadPipe;
exports.InitialPipe = InitialPipe;
exports.LastPipe = LastPipe;
exports.JoinPipe = JoinPipe;
exports.TailPipe = TailPipe;
exports.UniqPipe = UniqPipe;
exports.WithoutPipe = WithoutPipe;
exports.MapPipe = MapPipe;
exports.WherePipe = WherePipe;
exports.FirstOrDefaultPipe = FirstOrDefaultPipe;
exports.RangePipe = RangePipe;
exports.PluckPipe = PluckPipe;
exports.ReversePipe = ReversePipe;
exports.OrderByPipe = OrderByPipe;
exports.CountPipe = CountPipe;
exports.SomePipe = SomePipe;
exports.EveryPipe = EveryPipe;
exports.ShufflePipe = ShufflePipe;
exports.TakePipe = TakePipe;
exports.DropPipe = DropPipe;
exports.DeepPipe = DeepPipe;
exports.ChunkPipe = ChunkPipe;
exports.FlattenPipe = FlattenPipe;
exports.IntersectionPipe = IntersectionPipe;
exports.UnionPipe = UnionPipe;
exports.TakeWhilePipe = TakeWhilePipe;
exports.TakeUntilPipe = TakeUntilPipe;
exports.IsEqualPipe = IsEqualPipe;
exports.IsGreaterOrEqualPipe = IsGreaterOrEqualPipe;
exports.IsGreaterPipe = IsGreaterPipe;
exports.IsLessOrEqualPipe = IsLessOrEqualPipe;
exports.IsIdenticalPipe = IsIdenticalPipe;
exports.IsLessPipe = IsLessPipe;
exports.IsNotEqualPipe = IsNotEqualPipe;
exports.IsNotIdenticalPipe = IsNotIdenticalPipe;
exports.IsArrayPipe = IsArrayPipe;
exports.IsDefinedPipe = IsDefinedPipe;
exports.IsFunctionPipe = IsFunctionPipe;
exports.IsNilPipe = IsNilPipe;
exports.IsNullPipe = IsNullPipe;
exports.IsNumberPipe = IsNumberPipe;
exports.IsObjectPipe = IsObjectPipe;
exports.IsStringPipe = IsStringPipe;
exports.IsUndefinedPipe = IsUndefinedPipe;
exports.BytesPipe = BytesPipe;
exports.CeilPipe = CeilPipe;
exports.FloorPipe = FloorPipe;
exports.RoundPipe = RoundPipe;
exports.DegreesPipe = DegreesPipe;
exports.RadiansPipe = RadiansPipe;
exports.RandomPipe = RandomPipe;
exports.SqrtPipe = SqrtPipe;
exports.PowPipe = PowPipe;
exports.KeysPipe = KeysPipe;
exports.ToArrayPipe = ToArrayPipe;
exports.DefaultsPipe = DefaultsPipe;
exports.LeftPadPipe = LeftPadPipe;
exports.MatchPipe = MatchPipe;
exports.PadPipe = PadPipe;
exports.ReplacePipe = ReplacePipe;
exports.RightPadPipe = RightPadPipe;
exports.SplitPipe = SplitPipe;
exports.TestPipe = TestPipe;
exports.TrimPipe = TrimPipe;
exports.NewlinesPipe = NewlinesPipe;
exports.CapitalizePipe = CapitalizePipe;
exports.UpperFirstPipe = UpperFirstPipe;
exports.TemplatePipe = TemplatePipe;
exports.EncodeURIPipe = EncodeURIPipe;
exports.EncodeURIComponentPipe = EncodeURIComponentPipe;
exports.DecodeURIPipe = DecodeURIPipe;
exports.DecodeURIComponentPipe = DecodeURIComponentPipe;
exports.TruncatePipe = TruncatePipe;
exports.RepeatPipe = RepeatPipe;
exports.SlugifyPipe = SlugifyPipe;
exports.StripTagsPipe = StripTagsPipe;
exports.LatinizePipe = LatinizePipe;
exports.WrapPipe = WrapPipe;
exports.WithPipe = WithPipe;
exports.ReverseStrPipe = ReverseStrPipe;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=angular-pipes.umd.js.map
